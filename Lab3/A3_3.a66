;$NONSEGMENTED              ; Nur Tiny Model möglich
$MODV2                 ; Code fuer 161/163/164/165/167
$NOLIST
$INCLUDE (REG167.INC)   ; include CPU definition file 
$LIST
;
;	TITLE <LEDS!>
;
;	Prozessor Definitionen
;
;------------------------------------------------------------
; Hier folgen Ihre Konstanten Definitionen
;
Ora     	EQU	0	;Portbit für Ora

Taster_1 	EQU	0
Taster_1_bm	EQU	(1<<Taster_1)
Taster_2 	EQU	1
Taster_2_bm	EQU	(1<<Taster_2)
Schalter_1 	EQU 2
Schalter_2 	EQU	3	
LED_1		EQU 4
LED_1_MASK	EQU	(1<<LED_1)
LED_2 		EQU 5
LED_2_MASK	EQU	(1<<LED_2)
LED_3 		EQU 6
LED_3_MASK	EQU	(1<<LED_3)
	
Datenspeicher	SECTION Data
;------------------------------------------------------------
; Hier folgen Ihre Speicher Vereinbarungen
;
Mein_Speicher           DB      12      ;Byte Initialisiert
Mein_Speicher1          DW      65      ;Word Initialisiert
Mein_Speicher2          DD      4711
Mein_Text               DB      'ASCII Text'

Datenspeicher	ENDS
;
;
Programme	Section Code
ASSUME	DPP3:SYSTEM
ASSUME  DPP0:Datenspeicher
;------------------------------------------------------------
; Hier stehen Ihre Unterprogramme
;
;
;PInit	Initialisiert den Port Px
;=====
;	I: nix
;	O: nix
;	Z: Register, die zerstört werden.
;
MyUp1	PROC NEAR

	Ret
MyUp1	EndP;

PortInit PROC
	;Eingangsporte einrichten(=0)
	mov DP2,#0
	;Ausgangsporte einrichten(=1)
	mov DP2,#(LED_1_MASK|LED_2_MASK|LED_3_MASK)
	Ret
PortInit EndP;

;------------------------------------------------------------
; Hier startet das Hauptprogramm
;
A_RESET	PROC TASK STARTUP INTNO RESET = 0
	mov	r0,BUSCON0
	and	r0,#0xFF00
	mov	BUSCON0,r0
	mov	dpp0,#PAG Datenspeicher		;Page von Datenspeicher => DPP0
	mov 	KSCCFG,#0x0003;     		;Module Enable
	mov 	R0,KSCCFG			;wieder ruecklesen
	JMP	Main	
A_RESET	EndP

MAIN	Proc
;------------------------------------------------------------
;Hier geht Ihr Hauptprogramm los
;
	Call	MyUp1	
	CALL 	PortInit
	OR		DP2,#(1<<7)
	DISWDT
	

Forever:
	;LED1
	MOV 	R1,P2
	AND		R1,#Taster_1_bm
	;compare
	JMP		cc_NE,Led1_Off
	;if pressed
	; 0 = ON
	AND		P2,#not LED_1_MASK
	JMP		LED2
	;otherwise
	Led1_Off:
	; 1
	OR		P2,#LED_1_MASK
	
	;LED2
	LED2:
	MOV 	R2,P2
	AND		R2,#Taster_2_bm
	;compare
	JMP		cc_NE,Led2_Off
	;if pressed
	; 0 = ON
	AND		P2,#not LED_2_MASK
	jmp		Forever
	;otherwise
	; 1
	Led2_Off:
	OR		P2,#LED_2_MASK
	
jmp		Forever
;
;  Notstop
;
StopJetzt:	JMP	StopJetzt

Main		ENDP

Programme	ENDS
;

	END