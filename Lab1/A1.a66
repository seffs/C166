;$NONSEGMENTED              ; Nur Tiny Model möglich
$MODV2                 ; Code fuer 161/163/164/165/167
$NOLIST
$INCLUDE (REG167.INC)   ; include CPU definition file 
$LIST
;
;	TITLE <Mein Text>
;
;	Prozessor Definitionen
;
;------------------------------------------------------------
; Hier folgen Ihre Konstanten Definitionen
;
Ora     	EQU	0	;Portbit für Ora
Konst_01	EQU 20000	;
Konst_02	EQU 5000	;	
Konst_03	EQU -30000	;
Index_01	EQU 4	;
Index_02	EQU 6	;	
	
Datenspeicher	SECTION Data
;------------------------------------------------------------
; Hier folgen Ihre Speicher Vereinbarungen
;
Mein_Speicher           DB      12      ;Byte Initialisiert
Mein_Speicher1          DW      65      ;Word Initialisiert
Mein_Speicher2          DD      4711	;
Mein_Text               DB      'ASCII Text'	;
Var_01					DB		128	;
Var_02					DB		-1	;
Var_03					DW		30000	;
Var_04					DW		255	;
Var_05					DW		-20000	;
Dlab					DB		"Digitallabor",0

Datenspeicher	ENDS
;
;
Programme	Section Code
ASSUME	DPP3:SYSTEM
ASSUME  DPP0:Datenspeicher
;------------------------------------------------------------
; Hier stehen Ihre Unterprogramme
;
;
;PInit	Initialisiert den Port Px
;=====
;	I: nix
;	O: nix
;	Z: Register, die zerstört werden.
;
MyUp1	PROC NEAR

	Ret
MyUp1	EndP;

;------------------------------------------------------------
; Hier startet das Hauptprogramm
;
A_RESET	PROC TASK STARTUP INTNO RESET = 0
	mov	r0,BUSCON0
	and	r0,#0xFF00
	mov	BUSCON0,r0
	mov	dpp0,#PAG Datenspeicher		;Page von Datenspeicher => DPP0
	mov 	KSCCFG,#0x0003;     		;Module Enable
	mov 	R0,KSCCFG			;wieder ruecklesen
	JMP	Main	
A_RESET	EndP

MAIN	Proc
;------------------------------------------------------------
;Hier geht Ihr Hauptprogramm los
;
	Call	MyUp1	
	
	DISWDT	; Disable Watchdog
Forever:
	mov r11,#Konst_01
	mov r12,#Konst_02
	mov r13,#Konst_03
	mov r14,#Index_01
	mov r15,#Index_02
	mov rl6,Var_01
	mov rl7,Var_02
	mov r8,Var_03
	mov r9,Var_04
	mov r10,Var_05
	mov r0,#Dlab
	mov rl1,[r0+]
	loop:
		mov rl2,[r0+]
		cmp rl2,#0
		JMP cc_NZ,loop
	mov r0,#Dlab
	mov rl3,[r0+#Index_01]
	mov rl4,[r0+#Index_02]
	jmp		Forever
;
;  Notstop
;
StopJetzt:	JMP	StopJetzt

Main		ENDP

Programme	ENDS
;

	END
